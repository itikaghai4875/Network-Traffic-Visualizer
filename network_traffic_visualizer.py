# -*- coding: utf-8 -*-
"""Network traffic visualizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xd7iqOMMXa3jQXihcUNkOlCLWnliNXHK
"""

!pip install matplotlib pandas

import random
import csv
from datetime import datetime, timedelta

protocols = ['TCP', 'UDP', 'ICMP']

with open('traffic_data.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Timestamp', 'Source IP', 'Destination IP', 'Protocol', 'Packet Size'])

    for _ in range(500):
        time = datetime.now() - timedelta(seconds=random.randint(0, 3600))
        src_ip = f"192.168.1.{random.randint(1, 255)}"
        dst_ip = f"10.0.0.{random.randint(1, 255)}"
        protocol = random.choice(protocols)
        packet_size = random.randint(40, 1500)

        writer.writerow([time.strftime('%Y-%m-%d %H:%M:%S'), src_ip, dst_ip, protocol, packet_size])

import random
import csv
from datetime import datetime, timedelta

protocols = ['TCP', 'UDP', 'ICMP']

with open('traffic_data.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Timestamp', 'Source IP', 'Destination IP', 'Protocol', 'Packet Size'])

    for _ in range(500):
        time = datetime.now() - timedelta(seconds=random.randint(0, 3600))
        src_ip = f"192.168.1.{random.randint(1, 255)}"
        dst_ip = f"10.0.0.{random.randint(1, 255)}"
        protocol = random.choice(protocols)
        packet_size = random.randint(40, 1500)

        writer.writerow([time.strftime('%Y-%m-%d %H:%M:%S'), src_ip, dst_ip, protocol, packet_size])

import random
import csv
from datetime import datetime, timedelta
import pandas as pd

protocols = ['TCP', 'UDP', 'ICMP']

# Generate the traffic data CSV
with open('traffic_data.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Timestamp', 'Source IP', 'Destination IP', 'Protocol', 'Packet Size'])

    for _ in range(500):
        time = datetime.now() - timedelta(seconds=random.randint(0, 3600))
        src_ip = f"192.168.1.{random.randint(1, 255)}"
        dst_ip = f"10.0.0.{random.randint(1, 255)}"
        protocol = random.choice(protocols)
        packet_size = random.randint(40, 1500)

        writer.writerow([time.strftime('%Y-%m-%d %H:%M:%S'), src_ip, dst_ip, protocol, packet_size])

# Load the traffic data into a pandas DataFrame
df = pd.read_csv('traffic_data.csv')

# Display the head of the DataFrame
print(df.head())

import matplotlib.pyplot as plt
import pandas as pd

# Convert Timestamp column to datetime format (if not already done)
df['Timestamp'] = pd.to_datetime(df['Timestamp'])

# Plot Packet Size Over Time (Line Plot)
plt.figure(figsize=(12, 6))
plt.plot(df['Timestamp'], df['Packet Size'], color='blue', linewidth=1)
plt.title('ðŸ“ˆ Packet Size Over Time (Line Plot)')
plt.xlabel('Time')
plt.ylabel('Packet Size (bytes)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.grid(True)
plt.show()

# Plot Protocol Usage Frequency (Bar Chart)
protocol_counts = df['Protocol'].value_counts()

plt.figure(figsize=(6, 4))
protocol_counts.plot(kind='bar', color='green')
plt.title('ðŸ“Š Protocol Usage Frequency (Bar Chart)')
plt.xlabel('Protocol')
plt.ylabel('Count')
plt.tight_layout()
plt.grid(axis='y')
plt.show()

# Calculate Mean Packet Size in 5-minute intervals
mean_packet_size_5min = df.set_index('Timestamp').resample('5T')['Packet Size'].mean()
print("\nMean Packet Size (5-minute intervals):\n", mean_packet_size_5min.head())

# Plot Packet Size Over Time (Scatter Plot)
plt.figure(figsize=(12, 6))
plt.scatter(df['Timestamp'], df['Packet Size'], color='red', alpha=0.5)
plt.title('Scatter Plot of Packet Size Over Time')
plt.xlabel('Time')
plt.ylabel('Packet Size (bytes)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.grid(True)
plt.show()

# Plot Histogram of Packet Size
plt.figure(figsize=(8, 6))
plt.hist(df['Packet Size'], bins=20, color='purple', edgecolor='black')
plt.title('Histogram of Packet Size Distribution')
plt.xlabel('Packet Size (bytes)')
plt.ylabel('Frequency')
plt.tight_layout()
plt.grid(axis='y', alpha=0.75)
plt.show()

# Plot Protocol Usage Frequency (Pie Chart)
plt.figure(figsize=(7, 7))
protocol_counts.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=['lightgreen', 'lightblue', 'lightcoral'])
plt.title('Protocol Usage Frequency (Pie Chart)')
plt.ylabel('') # Hide the default 'Count' label on pie chart
plt.tight_layout()
plt.show()